/*
 * generated by Xtext 2.19.0
 */
lexer grammar InternalAcmeLexer;

@header {
package org.acme.ide.contentassist.antlr.lexer;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

Representation : ('R'|'r')('E'|'e')('P'|'p')('R'|'r')('E'|'e')('S'|'s')('E'|'e')('N'|'n')('T'|'t')('A'|'a')('T'|'t')('I'|'i')('O'|'o')('N'|'n');

Attachment : ('A'|'a')('T'|'t')('T'|'t')('A'|'a')('C'|'c')('H'|'h')('M'|'m')('E'|'e')('N'|'n')('T'|'t');

Component : ('C'|'c')('O'|'o')('M'|'m')('P'|'p')('O'|'o')('N'|'n')('E'|'e')('N'|'n')('T'|'t');

Connector : ('C'|'c')('O'|'o')('N'|'n')('N'|'n')('E'|'e')('C'|'c')('T'|'t')('O'|'o')('R'|'r');

Hueristic : ('H'|'h')('U'|'u')('E'|'e')('R'|'r')('I'|'i')('S'|'s')('T'|'t')('I'|'i')('C'|'c');

Invariant : ('I'|'i')('N'|'n')('V'|'v')('A'|'a')('R'|'r')('I'|'i')('A'|'a')('N'|'n')('T'|'t');

Abstract : ('A'|'a')('B'|'b')('S'|'s')('T'|'t')('R'|'r')('A'|'a')('C'|'c')('T'|'t');

Analysis : ('A'|'a')('N'|'n')('A'|'a')('L'|'l')('Y'|'y')('S'|'s')('I'|'i')('S'|'s');

Bindings : ('B'|'b')('I'|'i')('N'|'n')('D'|'d')('I'|'i')('N'|'n')('G'|'g')('S'|'s');

Distinct : ('D'|'d')('I'|'i')('S'|'s')('T'|'t')('I'|'i')('N'|'n')('C'|'c')('T'|'t');

Extended : ('E'|'e')('X'|'x')('T'|'t')('E'|'e')('N'|'n')('D'|'d')('E'|'e')('D'|'d');

External : ('E'|'e')('X'|'x')('T'|'t')('E'|'e')('R'|'r')('N'|'n')('A'|'a')('L'|'l');

Property : ('P'|'p')('R'|'r')('O'|'o')('P'|'p')('E'|'e')('R'|'r')('T'|'t')('Y'|'y');

Sequence : ('S'|'s')('E'|'e')('Q'|'q')('U'|'u')('E'|'e')('N'|'n')('C'|'c')('E'|'e');

Boolean : ('B'|'b')('O'|'o')('O'|'o')('L'|'l')('E'|'e')('A'|'a')('N'|'n');

Element : ('E'|'e')('L'|'l')('E'|'e')('M'|'m')('E'|'e')('N'|'n')('T'|'t');

Extends : ('E'|'e')('X'|'x')('T'|'t')('E'|'e')('N'|'n')('D'|'d')('S'|'s');

Members : ('M'|'m')('E'|'e')('M'|'m')('B'|'b')('E'|'e')('R'|'r')('S'|'s');

Private : ('P'|'p')('R'|'r')('I'|'i')('V'|'v')('A'|'a')('T'|'t')('E'|'e');

Design : ('D'|'d')('E'|'e')('S'|'s')('I'|'i')('G'|'g')('N'|'n');

Double : ('D'|'d')('O'|'o')('U'|'u')('B'|'b')('L'|'l')('E'|'e');

Exists : ('E'|'e')('X'|'x')('I'|'i')('S'|'s')('T'|'t')('S'|'s');

Family : ('F'|'f')('A'|'a')('M'|'m')('I'|'i')('L'|'l')('Y'|'y');

Forall : ('F'|'f')('O'|'o')('R'|'r')('A'|'a')('L'|'l')('L'|'l');

Import : ('I'|'i')('M'|'m')('P'|'p')('O'|'o')('R'|'r')('T'|'t');

Object : ('O'|'o')('B'|'b')('J'|'j')('E'|'e')('C'|'c')('T'|'t');

Public : ('P'|'p')('U'|'u')('B'|'b')('L'|'l')('I'|'i')('C'|'c');

Record : ('R'|'r')('E'|'e')('C'|'c')('O'|'o')('R'|'r')('D'|'d');

Select : ('S'|'s')('E'|'e')('L'|'l')('E'|'e')('C'|'c')('T'|'t');

String : ('S'|'s')('T'|'t')('R'|'r')('I'|'i')('N'|'n')('G'|'g');

KW_System : ('S'|'s')('Y'|'y')('S'|'s')('T'|'t')('E'|'e')('M'|'m');

Unique : ('U'|'u')('N'|'n')('I'|'i')('Q'|'q')('U'|'u')('E'|'e');

TNULL : ('T'|'t')('N'|'n')('U'|'u')('L'|'l')('L'|'l');

False : ('F'|'f')('A'|'a')('L'|'l')('S'|'s')('E'|'e');

Final : ('F'|'f')('I'|'i')('N'|'n')('A'|'a')('L'|'l');

Float : ('F'|'f')('L'|'l')('O'|'o')('A'|'a')('T'|'t');

Group : ('G'|'g')('R'|'r')('O'|'o')('U'|'u')('P'|'p');

Bool : ('B'|'b')('O'|'o')('O'|'o')('L'|'l');

Char : ('C'|'c')('H'|'h')('A'|'a')('R'|'r');

Enum : ('E'|'e')('N'|'n')('U'|'u')('M'|'m');

Port : ('P'|'p')('O'|'o')('R'|'r')('T'|'t');

Role : ('R'|'r')('O'|'o')('L'|'l')('E'|'e');

Rule : ('R'|'r')('U'|'u')('L'|'l')('E'|'e');

True : ('T'|'t')('R'|'r')('U'|'u')('E'|'e');

Type : ('T'|'t')('Y'|'y')('P'|'p')('E'|'e');

With : ('W'|'w')('I'|'i')('T'|'t')('H'|'h');

FullStopFullStopFullStop : '.''.''.';

LessThanSignHyphenMinusGreaterThanSign : '<''-''>';

And : ('A'|'a')('N'|'n')('D'|'d');

Any : ('A'|'a')('N'|'n')('Y'|'y');

Int : ('I'|'i')('N'|'n')('T'|'t');

New : ('N'|'n')('E'|'e')('W'|'w');

Seq : ('S'|'s')('E'|'e')('Q'|'q');

Set : ('S'|'s')('E'|'e')('T'|'t');

ExclamationMarkEqualsSign : '!''=';

PercentSignEqualsSign : '%''=';

AmpersandAmpersand : '&''&';

AsteriskEqualsSign : '*''=';

PlusSignPlusSign : '+''+';

PlusSignEqualsSign : '+''=';

HyphenMinusHyphenMinus : '-''-';

HyphenMinusEqualsSign : '-''=';

HyphenMinusGreaterThanSign : '-''>';

SolidusEqualsSign : '/''=';

ColonExclamationMark : ':''!';

LessThanSignLessThanSign : '<''<';

LessThanSignEqualsSign : '<''=';

EqualsSignEqualsSign : '=''=';

GreaterThanSignEqualsSign : '>''=';

GreaterThanSignGreaterThanSign : '>''>';

U : ('U'|'u')'=';

ReverseSolidusReverseSolidus : '\\''\\';

In : ('I'|'i')('N'|'n');

Or : ('O'|'o')('R'|'r');

To : ('T'|'t')('O'|'o');

VerticalLineVerticalLine : '|''|';

ExclamationMark : '!';

DollarSign : '$';

PercentSign : '%';

Apostrophe : '\'';

LeftParenthesis : '(';

RightParenthesis : ')';

Asterisk : '*';

PlusSign : '+';

Comma : ',';

HyphenMinus : '-';

FullStop : '.';

Solidus : '/';

Colon : ':';

Semicolon : ';';

LessThanSign : '<';

EqualsSign : '=';

GreaterThanSign : '>';

LeftSquareBracket : '[';

Backslash : '\\';

RightSquareBracket : ']';

LeftCurlyBracket : '{';

VerticalLine : '|';

RightCurlyBracket : '}';

fragment RULE_DIGIT : '0'..'9';

RULE_FLOAT : RULE_DIGIT+ '.'+ RULE_DIGIT+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
