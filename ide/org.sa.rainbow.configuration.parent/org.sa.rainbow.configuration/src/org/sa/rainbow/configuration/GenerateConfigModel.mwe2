module org.sa.rainbow.configuration.GenerateConfigModel

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

var rootPath = ".."

Workflow {
//	bean = StandaloneSetup {
//		scanClassPath = true
//		platformUri= "${runtimeProject}/.."
//		registerGenModelFile = "platform:/resource/org.sa.rainbow.configuration/model/ConfigModel.ecore"
//	}
	
		
	component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = "org.sa.rainbow.configuration"
				rootPath = rootPath
				runtimeTest = {
					enabled = true
				}
				eclipsePlugin = {
					enabled = true
				}
				eclipsePluginTest = {
					enabled = true
				}
				createEclipseMetaData = true
			}
			code = {
				encoding = "UTF-8"
				lineDelimiter = "\n"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		language = StandardLanguage {
			name = "org.sa.rainbow.configuration.ConfigModel"
			fileExtensions = "rbw"

			referencedResource="platform:/resource/org.sa.rainbow.stitch/model/generated/Stitch.genmodel"
			//referencedResource="platform:/resource/org.acme.xtext/model/generated/Acme.genmodel"
			serializer = {
				generateStub = false
			}
			validator = {
				// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
				// Generates checks for @Deprecated grammar annotations, an IssueProvider and a corresponding PropertyPage
				generateDeprecationValidation = true
			}
			junitSupport = {
				junitVersion = "5"
			}
			parserGenerator = {
				options  = {
					backtrackLexer = false
				}
			
			}
//			// Uses ANTLR Tools to compile a custom lexer and will also add a binding in the runtime module to use the runtime lexer
//			fragment = org.eclipse.xtext.generator.adapter.FragmentAdapter {
//				fragment = org.eclipse.xtext.generator.parser.antlr.ex.ExternalAntlrLexerFragment {
//					// A grammar file with .g will be expected in this package (should be stored in src folder)
//					lexerGrammar = "org.eclipse.xtext.example.xmleditor.parser.antlr.lexer.CustomInternalXmlLexer"
//					runtime = true
//					antlrParam = "-lib"
//					// This is the folder where the lexer will be created
//					antlrParam = "${runtimeProject}/src-gen/org/eclipse/xtext/example/xmleditor/parser/antlr/lexer"
//				}
//			}
//			
//			// Uses ANTLR Tools to compile a custom lexer and will also add a binding in the ui module to use the content assistant lexer
//			fragment = org.eclipse.xtext.generator.adapter.FragmentAdapter {
//				fragment = org.eclipse.xtext.generator.parser.antlr.ex.ExternalAntlrLexerFragment {
//					// A grammar file with .g will be expected in this package (should be stored in src folder)
//					lexerGrammar = "org.eclipse.xtext.example.xmleditor.ide.contentassist.antlr.lexer.CustomInternalXmlLexer"
//					contentAssist = true
//					antlrParam = "-lib"
//					// This is the folder where the lexer will be created
//					antlrParam = "${runtimeProject}.ide/src-gen/org/eclipse/xtext/example/xmleditor/ide/contentassist/antlr/lexer"
//				}
//			}
//			
//			// Uses ANTLR Tools to compile a custom lexer and will also add a binding in the ui module to use the hightlighting lexer
//			fragment = org.eclipse.xtext.generator.adapter.FragmentAdapter {
//				fragment = org.eclipse.xtext.generator.parser.antlr.ex.ExternalAntlrLexerFragment {
//					// A grammar file with .g will be expected in this package (should be stored in src folder)
//					lexerGrammar = "org.eclipse.xtext.example.xmleditor.ide.highlighting.antlr.lexer.CustomInternalXmlLexer"
//					highlighting = true
//					antlrParam = "-lib"
//					// This is the folder where the lexer will be created
//					antlrParam = "${runtimeProject}.ide/src-gen/org/eclipse/xtext/example/xmleditor/ide/highlighting/antlr/lexer"
//				}
//			}
		}
	}
}
