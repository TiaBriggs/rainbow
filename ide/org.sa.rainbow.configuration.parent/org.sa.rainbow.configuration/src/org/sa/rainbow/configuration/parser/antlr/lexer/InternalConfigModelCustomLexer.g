/*
 * generated by Xtext 2.19.0
 */
lexer grammar InternalConfigModelCustomLexer;

options {
	backtrack=true;
	memoize=false;
}


@header {
package org.sa.rainbow.configuration.parser.antlr.lexer;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
import org.sa.rainbow.configuration.parser.antlr.lexer.InternalConfigModelLexer;
}

@members{
	private boolean singleQuotedString = false;
	private boolean doubleQuotedString = false;
	private boolean stringVariable = false;
	
	private boolean keywordNotInString() {
		return !singleQuotedString && !doubleQuotedString || stringVariable;
	}
}



SYNTHETIC_ALL_KEYWORDS :
	(FRAGMENT_Import)=> FRAGMENT_Import {$type = InternalConfigModelLexer.Import; } |
	(FRAGMENT_Target)=> FRAGMENT_Target {$type = InternalConfigModelLexer.Target; } |
	(FRAGMENT_DEBUG)=> FRAGMENT_DEBUG {$type = InternalConfigModelLexer.DEBUG; } |
	(FRAGMENT_ERROR)=> FRAGMENT_ERROR {$type = InternalConfigModelLexer.ERROR; } |
	(FRAGMENT_FATAL)=> FRAGMENT_FATAL {$type = InternalConfigModelLexer.FATAL; } |
	(FRAGMENT_TRACE)=> FRAGMENT_TRACE {$type = InternalConfigModelLexer.TRACE; } |
	(FRAGMENT_False)=> FRAGMENT_False {$type = InternalConfigModelLexer.False; } |
	(FRAGMENT_Gauge)=> FRAGMENT_Gauge {$type = InternalConfigModelLexer.Gauge; } |
	(FRAGMENT_Probe)=> FRAGMENT_Probe {$type = InternalConfigModelLexer.Probe; } |
	(FRAGMENT_INFO)=> FRAGMENT_INFO {$type = InternalConfigModelLexer.INFO; } |
	(FRAGMENT_WARN)=> FRAGMENT_WARN {$type = InternalConfigModelLexer.WARN; } |
	(FRAGMENT_True)=> FRAGMENT_True {$type = InternalConfigModelLexer.True; } |
	(FRAGMENT_Type)=> FRAGMENT_Type {$type = InternalConfigModelLexer.Type; } |
	(FRAGMENT_ALL)=> FRAGMENT_ALL {$type = InternalConfigModelLexer.ALL; } |
	(FRAGMENT_OFF)=> FRAGMENT_OFF {$type = InternalConfigModelLexer.OFF; } |
	(FRAGMENT_ReverseSolidusDollarSignLeftCurlyBracket)=> FRAGMENT_ReverseSolidusDollarSignLeftCurlyBracket {$type = InternalConfigModelLexer.ReverseSolidusDollarSignLeftCurlyBracket; } |
	(FRAGMENT_Var)=> FRAGMENT_Var {$type = InternalConfigModelLexer.Var; } |
	(FRAGMENT_DollarSignLeftCurlyBracket)=> FRAGMENT_DollarSignLeftCurlyBracket {$type = InternalConfigModelLexer.DollarSignLeftCurlyBracket; } |
	(FRAGMENT_HyphenMinusGreaterThanSign)=> FRAGMENT_HyphenMinusGreaterThanSign {$type = InternalConfigModelLexer.HyphenMinusGreaterThanSign; } |
	(FRAGMENT_FullStopAsterisk)=> FRAGMENT_FullStopAsterisk {$type = InternalConfigModelLexer.FullStopAsterisk; } |
	(FRAGMENT_ReverseSolidusQuotationMark)=> FRAGMENT_ReverseSolidusQuotationMark {$type = InternalConfigModelLexer.ReverseSolidusQuotationMark; } |
	(FRAGMENT_ReverseSolidusApostrophe)=> FRAGMENT_ReverseSolidusApostrophe {$type = InternalConfigModelLexer.ReverseSolidusApostrophe; } |
	(FRAGMENT_ReverseSolidusReverseSolidus)=> FRAGMENT_ReverseSolidusReverseSolidus {$type = InternalConfigModelLexer.ReverseSolidusReverseSolidus; } |
	(FRAGMENT_QuotationMark)=> FRAGMENT_QuotationMark {$type = InternalConfigModelLexer.QuotationMark; } |
	(FRAGMENT_Apostrophe)=> FRAGMENT_Apostrophe {$type = InternalConfigModelLexer.Apostrophe; } |
	(FRAGMENT_PlusSign)=> FRAGMENT_PlusSign {$type = InternalConfigModelLexer.PlusSign; } |
	(FRAGMENT_HyphenMinus)=> FRAGMENT_HyphenMinus {$type = InternalConfigModelLexer.HyphenMinus; } |
	(FRAGMENT_FullStop)=> FRAGMENT_FullStop {$type = InternalConfigModelLexer.FullStop; } |
	(FRAGMENT_EqualsSign)=> FRAGMENT_EqualsSign {$type = InternalConfigModelLexer.EqualsSign; } |
	(FRAGMENT_LeftCurlyBracket)=> FRAGMENT_LeftCurlyBracket {$type = InternalConfigModelLexer.LeftCurlyBracket; } |
	(FRAGMENT_RightCurlyBracket)=> FRAGMENT_RightCurlyBracket {$type = InternalConfigModelLexer.RightCurlyBracket; } |
	(FRAGMENT_RULE_ID)=> FRAGMENT_RULE_ID {$type = InternalConfigModelLexer.RULE_ID; } |
	(FRAGMENT_RULE_INT)=> FRAGMENT_RULE_INT {$type = InternalConfigModelLexer.RULE_INT; } |
	(FRAGMENT_RULE_ML_COMMENT)=> FRAGMENT_RULE_ML_COMMENT {$type = InternalConfigModelLexer.RULE_ML_COMMENT; } |
	(FRAGMENT_RULE_SL_COMMENT)=> FRAGMENT_RULE_SL_COMMENT {$type = InternalConfigModelLexer.RULE_SL_COMMENT; } |
	(FRAGMENT_RULE_WS)=> FRAGMENT_RULE_WS {$type = InternalConfigModelLexer.RULE_WS; } |
	(FRAGMENT_RULE_ANY_OTHER)=> FRAGMENT_RULE_ANY_OTHER {$type = InternalConfigModelLexer.RULE_ANY_OTHER; }
;

fragment FRAGMENT_Import : {keywordNotInString()}?=>'import';

fragment FRAGMENT_Target : {keywordNotInString()}?=>'target';

fragment FRAGMENT_DEBUG : {keywordNotInString()}?=>'DEBUG';

fragment FRAGMENT_ERROR : {keywordNotInString()}?=>'ERROR';

fragment FRAGMENT_FATAL : {keywordNotInString()}?=>'FATAL';

fragment FRAGMENT_TRACE : {keywordNotInString()}?=>'TRACE';

fragment FRAGMENT_False : {keywordNotInString()}?=>'false';

fragment FRAGMENT_Gauge : {keywordNotInString()}?=>'gauge';

fragment FRAGMENT_Probe : {keywordNotInString()}?=>'probe';

fragment FRAGMENT_INFO : {keywordNotInString()}?=>'INFO';

fragment FRAGMENT_WARN : {keywordNotInString()}?=>'WARN';

fragment FRAGMENT_True : {keywordNotInString()}?=>'true';

fragment FRAGMENT_Type : {keywordNotInString()}?=>'type';

fragment FRAGMENT_ALL : {keywordNotInString()}?=>'ALL';

fragment FRAGMENT_OFF :{keywordNotInString()}?=> 'OFF';

fragment FRAGMENT_ReverseSolidusDollarSignLeftCurlyBracket : '\\${';

fragment FRAGMENT_Var : {keywordNotInString()}?=>'var';

fragment FRAGMENT_DollarSignLeftCurlyBracket : '${' {stringVariable=true;};

fragment FRAGMENT_HyphenMinusGreaterThanSign : {keywordNotInString()}?=>'->';

fragment FRAGMENT_FullStopAsterisk : {keywordNotInString()}?=>'.*';

fragment FRAGMENT_ReverseSolidusQuotationMark : '\\"';

fragment FRAGMENT_ReverseSolidusApostrophe : '\\\'';

fragment FRAGMENT_ReverseSolidusReverseSolidus : '\\\\';

fragment FRAGMENT_QuotationMark : {!singleQuotedString || stringVariable}?=>'"'{ if (!singleQuotedString) { doubleQuotedString = !doubleQuotedString; } } ; 

fragment FRAGMENT_Apostrophe : {!doubleQuotedString || stringVariable}?=>'\'' { if (!doubleQuotedString) { singleQuotedString = !singleQuotedString; } };

fragment FRAGMENT_PlusSign : {keywordNotInString()}?=>'+';

fragment FRAGMENT_HyphenMinus : {keywordNotInString()}?=>'-';

fragment FRAGMENT_FullStop : {keywordNotInString()}?=>'.';

fragment FRAGMENT_EqualsSign : {keywordNotInString()}?=>'=';

fragment FRAGMENT_LeftCurlyBracket : {keywordNotInString()}?=>'{';

fragment FRAGMENT_RightCurlyBracket : {keywordNotInString()}?=>'}' {stringVariable=false;};


// Rules duplicated to allow inter-rule references

fragment RULE_ID : FRAGMENT_RULE_ID;
fragment FRAGMENT_RULE_ID : ('a'..'z'|'A'..'Z') (('a'..'z'|'A'..'Z')|'_'|'-'|'0'..'9')*;

fragment RULE_INT : FRAGMENT_RULE_INT;
fragment FRAGMENT_RULE_INT : ('0'..'9')+;

fragment RULE_ML_COMMENT : FRAGMENT_RULE_ML_COMMENT;
fragment FRAGMENT_RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

fragment RULE_SL_COMMENT : FRAGMENT_RULE_SL_COMMENT;
fragment FRAGMENT_RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

fragment RULE_WS : FRAGMENT_RULE_WS;
fragment FRAGMENT_RULE_WS : (' '|'\t'|'\r'|'\n')+;

fragment RULE_ANY_OTHER : FRAGMENT_RULE_ANY_OTHER;
fragment FRAGMENT_RULE_ANY_OTHER : .;

//Import: {keywordNotInString()}?=>'import' ;
//Target: {keywordNotInString()}?=>'target';
//DEBUG: {keywordNotInString()}?=>'DEBUG';
//ERROR: {keywordNotInString()}?=>'ERROR';
//FATAL: {keywordNotInString()}?=>'FATAL';
//TRACE: {keywordNotInString()}?=>'TRACE';
//False: {keywordNotInString()}?=>'false';
//Gauge: {keywordNotInString()}?=>'gauge';
//Probe: {keywordNotInString()}?=>'probe';
//INFO: {keywordNotInString()}?=>'INFO';
//WARN: {keywordNotInString()}?=>'WARN';
//True: {keywordNotInString()}?=>'true';
//Type: {keywordNotInString()}?=>'type';
//Var: {keywordNotInString()}?=>'var';
//ReverseSolidusDollarSignLeftCurlyBracket : '\\${';
//DollarSignLeftCurlyBracket : '${' {stringVariable = true;};
//HyphenMinusGreaterThanSign : {keywordNotInString()}?=>'->';
//FullStopAsterisk : {keywordNotInString()}?=>'.*';
//ReverseSolidusQuotationMark : '\\"';
//ReverseSolidusApostrophe : '\\\'';
//ReverseSolidusReverseSolidus : '\\\\';
//QuotationMark : {!singleQuotedString || stringVariable}?=>'"'{ if (!singleQuotedString) { doubleQuotedString = !doubleQuotedString; } } ; 
//Apostrophe : {!doubleQuotedString || stringVariable}?=>'\'' { if (!doubleQuotedString) { singleQuotedString = !singleQuotedString; } };
//PlusSign : {keywordNotInString()}?=>'+';
//HyphenMinus : {keywordNotInString()}?=>'-';
//FullStop : {keywordNotInString()}?=>'.';
//EqualsSign : {keywordNotInString()}?=>'=';
//LeftCurlyBracket : {keywordNotInString()}?=>'{';
//RightCurlyBracket : {keywordNotInString()}?=>'}'{ stringVariable = false; };

// Rules duplicated to allow inter-rule references
//RULE_ID : ('a'..'z'|'A'..'Z') (('a'..'z'|'A'..'Z')|'_'|'-'|'0'..'9')*;
//INT : ('0'..'9')+;
//ML_COMMENT : {keywordNotInString()}?=>'/*' ( options {greedy=false;} : . )*'*/';
//SL_COMMENT : {keywordNotInString()}?=>'//' ~(('\n'|'\r'))* ('\r'? '\n')?;
//RULE_WS : (' '|'\t'|'\r'|'\n')+;
//RULE_ANY_OTHER : .;
