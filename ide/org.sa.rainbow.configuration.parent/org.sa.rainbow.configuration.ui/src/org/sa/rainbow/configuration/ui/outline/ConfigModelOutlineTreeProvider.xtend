/*
 * generated by Xtext 2.19.0
 */
package org.sa.rainbow.configuration.ui.outline

import org.eclipse.swt.graphics.Image
import org.eclipse.xtext.ui.editor.outline.IOutlineNode
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider
import org.sa.rainbow.configuration.configModel.Assignment
import org.sa.rainbow.configuration.configModel.Component
import org.sa.rainbow.configuration.configModel.ConfigModelPackage
import org.sa.rainbow.configuration.configModel.PropertyContainer

/**
 * Customization of the default outline structure.
 *
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#outline
 */
class ConfigModelOutlineTreeProvider extends DefaultOutlineTreeProvider {

	def Image nullImage() {
		return null;
	}

	def _createChildren(IOutlineNode parentNode, PropertyContainer setup) {
		for (Assignment a : setup.properties.assignment) {
			createNode(parentNode, a);
		}
	}
	
	def _createChildren(IOutlineNode parentNode, Assignment ass) {
		if (ass.value !== null && ass.value.value !== null && ass.value.value instanceof Component) {
			for (Assignment a : (ass.value.value as Component).assignment) {
				createNode(parentNode, a)
			}
		}
		else super._createChildren(parentNode, ass);
	}
	
	def _createNode(IOutlineNode parentNode, Assignment ass) {
		if (ass.value !== null && ass.value.value !== null && ass.value.value instanceof Component) {
			super._createNode(parentNode, ass);
			
		}
		else {
			createEStructuralFeatureNode(parentNode, ass, ConfigModelPackage.Literals.ASSIGNMENT__NAME, nullImage(), ass.name, true);
		}
	}
	
//	def _createChildren(IOutlineNode parentNode, Value v) {
//		var value = v.value;
//		if (value instanceof Component) {
//			var comp = value as Component;
//			for (Assignment a : comp.assignment) {
//				createNode(parentNode, a)
//			}
//		}
//		else {
//			super._createChildren(parentNode,v);
//		}
//		
//	}
	
}
